import { useCallback, useEffect, useRef, useState } from "react";
import { redirect, useSearchParams } from "react-router-dom";
import { toast } from "react-toastify";

interface UseWebSocketProps {
	socketUrl: string;
	myTelegramId: string;
	roomId: string | null;
}

interface RoomMember {
	telegramId: string;
	online: boolean;
	userColor?: string;
	username?: string;
}

interface CursorData {
	telegramId: string;
	position: [number, number];
	userColor: string;
	username?: string;
}

interface CodeEditData {
	telegramId: string;
	changes: {
		from: number;
		to: number;
		insert: string;
	}[];
	newCode: string;
	userColor: string;
	username?: string;
	timestamp: number;
}

interface RoomPermissions {
	studentCursorEnabled: boolean;
	studentSelectionEnabled: boolean;
	studentEditCodeEnabled: boolean;
}

export const useWebSocket = ({
	socketUrl,
	myTelegramId,
	roomId,
}: UseWebSocketProps) => {
	const [isConnected, setIsConnected] = useState<boolean>(false);
	const [isJoinedRoom, setIsJoinedRoom] = useState<boolean>(false);
	const [connectionError, setConnectionError] = useState<string | null>(null);
	const [roomMembers, setRoomMembers] = useState<RoomMember[]>([]);
	const [cursors, setCursors] = useState<Map<string, CursorData>>(new Map());
	const [selections, setSelections] = useState<
		Map<
			string,
			{
				line?: number;
				column?: number;
				selectionStart?: { line: number; column: number };
				selectionEnd?: { line: number; column: number };
				selectedText?: string;
				userColor: string;
			}
		>
	>(new Map());
	const [codeEdits, setCodeEdits] = useState<Map<string, CodeEditData>>(
		new Map()
	);
	const [myUserColor, setMyUserColor] = useState<string>("#FF6B6B");
	const [roomPermissions, setRoomPermissions] = useState<RoomPermissions>({
		studentCursorEnabled: true,
		studentSelectionEnabled: true,
		studentEditCodeEnabled: true,
	});
	const [isTeacher, setIsTeacher] = useState<boolean>(false);

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—á–∞—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	const [activeTypers, setActiveTypers] = useState<Set<string>>(new Set());
	const typingTimeouts = useRef<Map<string, NodeJS.Timeout>>(new Map());

	const [searchParams] = useSearchParams();

	// Refs –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	const socketRef = useRef<WebSocket | null>(null);
	const socketUrlRef = useRef(socketUrl);
	const myTelegramIdRef = useRef(myTelegramId);
	const roomIdRef = useRef(roomId);
	const isConnectedRef = useRef(false);
	const shouldReconnectRef = useRef(true);
	const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
	const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);
	const heartbeatTimeoutRef = useRef<NodeJS.Timeout | null>(null);
	const connectionAttempts = useRef(0);
	const lastConnectionTime = useRef(0);
	const maxRetriesBeforeError = useRef(3); // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—à–∏–±–∫–∏

	// State –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	const [forceReconnectTrigger, setForceReconnectTrigger] = useState(0);

	// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
	const clearIntervals = useCallback(() => {
		if (reconnectTimeoutRef.current) {
			clearTimeout(reconnectTimeoutRef.current);
			reconnectTimeoutRef.current = null;
		}
		if (pingIntervalRef.current) {
			clearInterval(pingIntervalRef.current);
			pingIntervalRef.current = null;
		}
		if (heartbeatTimeoutRef.current) {
			clearTimeout(heartbeatTimeoutRef.current);
			heartbeatTimeoutRef.current = null;
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
	const joinRoom = useCallback(() => {
		// –ï—Å–ª–∏ –Ω–µ—Ç roomId, —Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ –Ω—É–∂–Ω–æ
		if (!roomIdRef.current) {
			console.log("üìù No room ID, skipping room join");
			return;
		}

		if (socketRef.current?.readyState === WebSocket.OPEN) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
			const savedUsername = localStorage.getItem("innoprog-username");

			const joinMessage = `42["join-room",${JSON.stringify({
				telegramId: myTelegramIdRef.current,
				roomId: roomIdRef.current,
				username: savedUsername || undefined,
			})}]`;
			socketRef.current.send(joinMessage);
			console.log(
				"üè† Joining room:",
				roomIdRef.current,
				"with username:",
				savedUsername
			);
		}
	}, []);

	const completeSession = useCallback(() => {
		if (!roomIdRef.current) return;

		if (socketRef.current?.readyState === WebSocket.OPEN) {
			const completeMessage = `42["close-session",${JSON.stringify({
				telegramId: myTelegramIdRef.current,
				roomId: roomIdRef.current,
			})}]`;
			socketRef.current.send(completeMessage);
			console.log("üì§ Sent complete session message:", completeMessage);
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ
	const markUserAsTyping = useCallback((telegramId: string) => {
		setActiveTypers((prev) => {
			const newSet = new Set(prev);
			newSet.add(telegramId);
			return newSet;
		});

		if (typingTimeouts.current.has(telegramId)) {
			clearTimeout(typingTimeouts.current.get(telegramId)!);
		}

		const timeout = setTimeout(() => {
			setActiveTypers((prev) => {
				const newSet = new Set(prev);
				newSet.delete(telegramId);
				return newSet;
			});
			typingTimeouts.current.delete(telegramId);
		}, 2000);

		typingTimeouts.current.set(telegramId, timeout);
	}, []);

	// –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	const connectWebSocket = useCallback(() => {
		const currentRoomId = roomIdRef.current;
		const currentSocketUrl = socketUrlRef.current;
		const currentMyTelegramId = myTelegramIdRef.current;

		// –ï—Å–ª–∏ –Ω–µ—Ç roomId, —Ç–æ WebSocket –Ω–µ –Ω—É–∂–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
		if (!currentRoomId) {
			console.log("üìù Working in editor mode without room collaboration");
			setIsConnected(false);
			setIsJoinedRoom(false);
			return;
		}

		if (!shouldReconnectRef.current) {
			console.log("‚ùå Reconnection disabled");
			return;
		}

		// –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö)
		const now = Date.now();
		const timeSinceLastConnection = now - lastConnectionTime.current;
		if (timeSinceLastConnection < 5000 && lastConnectionTime.current > 0) {
			// –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 —Å–µ–∫—É–Ω–¥ (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
			console.log(
				`‚è≥ Too frequent connection attempts, skipping... (${timeSinceLastConnection}ms since last)`
			);
			return;
		}
		console.log(
			`üîå Connection allowed (${timeSinceLastConnection}ms since last, lastTime: ${lastConnectionTime.current})`
		);
		lastConnectionTime.current = now;

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		if (
			socketRef.current &&
			socketRef.current.readyState !== WebSocket.CLOSED
		) {
			socketRef.current.close();
		}

		clearIntervals();

		// –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º WebSocket URL, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—Ç
		let wsUrl;
		if (currentSocketUrl.startsWith("https://")) {
			wsUrl = currentSocketUrl.replace("https://", "wss://");
		} else if (currentSocketUrl.startsWith("http://")) {
			wsUrl = currentSocketUrl.replace("http://", "ws://");
		} else {
			wsUrl = `ws://${currentSocketUrl}`;
		}

		const fullWsUrl = `${wsUrl}/socket.io/?EIO=4&transport=websocket&t=${Date.now()}`;

		console.log(
			`üîå Connecting to WebSocket (attempt ${connectionAttempts.current + 1}):`,
			{ originalUrl: currentSocketUrl, wsUrl, fullWsUrl }
		);

		const socket = new WebSocket(fullWsUrl);
		socketRef.current = socket;

		socket.onopen = () => {
			console.log("üü¢ WebSocket connected successfully");
			setIsConnected(true);
			setConnectionError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
			isConnectedRef.current = true;
			connectionAttempts.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

			// Socket.IO handshake
			socket.send("40");
			console.log("üì§ Sent handshake");

			// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
			setTimeout(joinRoom, 100);

			// –ó–∞–ø—É—Å–∫–∞–µ–º ping/pong (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
			const sendPing = () => {
				if (socket.readyState === WebSocket.OPEN) {
					socket.send("2");
					console.log("üì§ Sent ping");

					// –û–∂–∏–¥–∞–µ–º pong –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
					heartbeatTimeoutRef.current = setTimeout(() => {
						console.log("üíî No pong received, closing connection");
						socket.close(1000, "No pong received");
					}, 10000);
				}
			};

			pingIntervalRef.current = setInterval(sendPing, 60000);
		};

		socket.onclose = (event) => {
			console.log("üî¥ WebSocket disconnected:", {
				code: event.code,
				reason: event.reason,
				wasClean: event.wasClean,
				timestamp: new Date().toISOString(),
			});
			setIsConnected(false);
			setIsJoinedRoom(false);

			isConnectedRef.current = false;
			clearIntervals();

			// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å roomId –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
			if (shouldReconnectRef.current && currentRoomId) {
				connectionAttempts.current++;

				// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
				if (connectionAttempts.current > maxRetriesBeforeError.current) {
					if (event.code !== 1000) {
						// –ù–µ –æ–±—ã—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
						setConnectionError("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
					}
				} else {
					// –ï—â–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏
					setConnectionError(null);
				}

				const delay = 2000; // ‚úÖ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

				console.log(
					`üîÑ Reconnecting in 2s (attempt ${connectionAttempts.current}/${maxRetriesBeforeError.current}) for room ${currentRoomId}`
				);
				reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
			} else {
				console.log("‚ùå Not reconnecting: no room or reconnection disabled");
			}
		};

		socket.onerror = (error) => {
			console.error("‚ùå WebSocket error:", {
				error,
				url: fullWsUrl,
				readyState: socket.readyState,
				timestamp: new Date().toISOString(),
				attempt: connectionAttempts.current + 1,
			});
			setIsConnected(false);

			// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É —Å—Ä–∞–∑—É
			// –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ onclose —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
			// setConnectionError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");

			isConnectedRef.current = false;
		};

		socket.onmessage = (event) => {
			const message = event.data;

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Engine.IO pong
			if (message === "3") {
				console.log("üì• Received pong");
				// –û—á–∏—â–∞–µ–º timeout –æ–∂–∏–¥–∞–Ω–∏—è pong
				if (heartbeatTimeoutRef.current) {
					clearTimeout(heartbeatTimeoutRef.current);
					heartbeatTimeoutRef.current = null;
				}
				return;
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Socket.IO —Å–æ–æ–±—â–µ–Ω–∏—è
			if (message.startsWith("42[")) {
				try {
					const data = JSON.parse(message.slice(2));
					const eventName = data[0];
					const eventData = data[1];

					console.log("üì• Received WebSocket message:", eventName, eventData);

					switch (eventName) {
						case "joined":
							console.log("‚úÖ Successfully joined room:", eventData);
							setIsJoinedRoom(true);
							setMyUserColor(eventData.userColor || "#FF6B6B");
							setIsTeacher(eventData.isTeacher || false);
							if (eventData.roomPermissions) {
								setRoomPermissions(eventData.roomPermissions);
							}
							if (eventData.currentCursors) {
								setCursors(
									new Map(
										eventData.currentCursors.map((cursor: CursorData) => [
											cursor.telegramId,
											cursor,
										])
									)
								);
							}
							if (eventData.currentSelections) {
								const selectionsMap = new Map();
								eventData.currentSelections.forEach((selection: any) => {
									if (selection.telegramId !== myTelegramIdRef.current) {
										selectionsMap.set(selection.telegramId, {
											line: selection.line,
											column: selection.column,
											selectionStart: selection.selectionStart,
											selectionEnd: selection.selectionEnd,
											selectedText: selection.selectedText,
											userColor: selection.userColor || "#FF6B6B",
											username: selection.username,
										});
									}
								});
								setSelections(selectionsMap);
								console.log("üìç Loaded initial selections:", selectionsMap);
							}
							break;

						case "members-updated":
							console.log("üë• Members updated:", eventData);
							const members = eventData.members || [];
							setRoomMembers(members);
							break;

						case "member-left":
							console.log("üëã Member left:", eventData.telegramId);
							// –û—á–∏—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
							if (!eventData.keepCursor) {
								setCursors((prev) => {
									const newCursors = new Map(prev);
									newCursors.delete(eventData.telegramId);
									return newCursors;
								});
							} else {
								setCursors((prev) => {
									const newCursors = new Map(prev);
									const existingCursor = newCursors.get(eventData.telegramId);
									if (existingCursor) {
										newCursors.set(eventData.telegramId, {
											...existingCursor,
											isOffline: true,
										} as any);
									}
									return newCursors;
								});
							}

							// –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
							setSelections((prev) => {
								const newSelections = new Map(prev);
								newSelections.delete(eventData.telegramId);
								return newSelections;
							});
							break;

						case "cursor-action":
							if (eventData.telegramId !== myTelegramIdRef.current) {
								console.log("üëÜ Cursor update:", {
									telegramId: eventData.telegramId,
									username: eventData.username,
									position: eventData.position,
									userColor: eventData.userColor,
								});
								setCursors((prev) => {
									const newCursors = new Map(prev);
									newCursors.set(eventData.telegramId, {
										telegramId: eventData.telegramId,
										position: eventData.position,
										userColor: eventData.userColor,
										username: eventData.username,
									});
									return newCursors;
								});
							}
							break;

						case "selection-state":
							console.log("üìç Received selection state:", eventData);

							// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
							const newSelections = new Map();
							eventData.selections.forEach((selection: any) => {
								if (
									selection.telegramId &&
									selection.telegramId !== myTelegramIdRef.current
								) {
									newSelections.set(selection.telegramId, {
										line: selection.line,
										column: selection.column,
										selectionStart: selection.selectionStart,
										selectionEnd: selection.selectionEnd,
										selectedText: selection.selectedText,
										userColor: selection.userColor || "#FF6B6B",
										username: selection.username,
									});
								}
							});

							setSelections(newSelections);
							console.log("üìç Updated selections map:", newSelections);
							break;

						case "complete-session":
							console.log("üèÅ Session completed:", eventData.message);

							toast(eventData.message);

							setTimeout(() => {
								const url = new URL(window.location.href);
								url.search = ""; // –û—á–∏—â–∞–µ–º –≤—Å–µ search –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

								window.location.href = url.origin + url.pathname;
							}, 2000);
							break;

						case "code-edit-action":
							if (eventData.telegramId !== myTelegramIdRef.current) {
								console.log(
									"üìù Received code edit from:",
									eventData.telegramId
								);
								markUserAsTyping(eventData.telegramId);

								setCodeEdits((prev) => {
									const newCodeEdits = new Map(prev);
									newCodeEdits.set(eventData.telegramId, {
										telegramId: eventData.telegramId,
										changes: eventData.changes,
										newCode: eventData.newCode,
										userColor: eventData.userColor,
										username: eventData.username,
										timestamp: eventData.timestamp,
									});
									return newCodeEdits;
								});
							}
							break;

						case "code-edit-confirmed":
							console.log(
								"‚úÖ Code edit confirmed at:",
								new Date(eventData.timestamp)
							);
							break;

						case "room-edited":
							console.log("üè† Room settings updated:", eventData);
							// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è room-edited
							if (
								eventData.studentCursorEnabled !== undefined &&
								eventData.studentSelectionEnabled !== undefined &&
								eventData.studentEditCodeEnabled !== undefined
							) {
								setRoomPermissions({
									studentCursorEnabled: eventData.studentCursorEnabled,
									studentSelectionEnabled: eventData.studentSelectionEnabled,
									studentEditCodeEnabled: eventData.studentEditCodeEnabled,
								});
								console.log("üîß Room permissions updated:", {
									studentCursorEnabled: eventData.studentCursorEnabled,
									studentSelectionEnabled: eventData.studentSelectionEnabled,
									studentEditCodeEnabled: eventData.studentEditCodeEnabled,
								});
							}
							break;

						case "room-state-loaded":
							console.log("üîÑ Room state loaded from DB:", eventData);
							// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
							window.dispatchEvent(
								new CustomEvent("roomStateLoaded", {
									detail: {
										lastCode: eventData.lastCode,
										participantCount: eventData.participantCount,
									},
								})
							);
							break;

						case "clear-user-selections":
							console.log(
								"üßπ Clearing selections for user:",
								eventData.telegramId
							);
							if (eventData.telegramId !== myTelegramIdRef.current) {
								setSelections((prev) => {
									const newSelections = new Map(prev);
									newSelections.delete(eventData.telegramId);
									return newSelections;
								});
							}
							break;

						case "room-sound":
							console.log("üîä Received room sound:", eventData);
							// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç –Ω–∞—Å
							if (
								eventData.telegramId !== myTelegramIdRef.current &&
								eventData.soundType === "permission-change"
							) {
								try {
									const audioContext = new (window.AudioContext ||
										(window as any).webkitAudioContext)();
									const oscillator = audioContext.createOscillator();
									const gainNode = audioContext.createGain();

									oscillator.connect(gainNode);
									gainNode.connect(audioContext.destination);

									// –ú—è–≥–∫–∏–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
									oscillator.frequency.setValueAtTime(
										700,
										audioContext.currentTime
									);
									gainNode.gain.setValueAtTime(0, audioContext.currentTime);
									gainNode.gain.linearRampToValueAtTime(
										0.03,
										audioContext.currentTime + 0.01
									);
									gainNode.gain.exponentialRampToValueAtTime(
										0.001,
										audioContext.currentTime + 0.15
									);

									oscillator.type = "sine";
									oscillator.start(audioContext.currentTime);
									oscillator.stop(audioContext.currentTime + 0.15);
								} catch (e) {
									// Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
									try {
										const audio = new Audio();
										audio.volume = 0.08;
										audio.src = `data:audio/wav;base64,UklGRlQDAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=`;
										audio.play();
									} catch (fallbackError) {
										// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –∑–≤—É–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω
									}
								}
							}
							break;

						case "error":
							console.error("‚ùå Server error:", eventData.message);
							break;
					}
				} catch (error) {
					console.error("‚ùå Failed to parse message:", error);
				}
			}
		};
	}, [joinRoom, markUserAsTyping]); // –¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

	// useEffect –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	useEffect(() => {
		if (
			forceReconnectTrigger > 0 &&
			roomIdRef.current &&
			shouldReconnectRef.current
		) {
			console.log("üî• Force reconnect triggered, calling connectWebSocket");
			// –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞—â–∏—Ç—ã
			lastConnectionTime.current = 0;
			connectionAttempts.current = 0;
			setConnectionError(null);

			// –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			connectWebSocket();
		}
	}, [forceReconnectTrigger, connectWebSocket]);

	// –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props (–Ω–æ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
	useEffect(() => {
		socketUrlRef.current = socketUrl;
		myTelegramIdRef.current = myTelegramId;
		const wasRoomId = roomIdRef.current;
		roomIdRef.current = roomId;

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è roomId
		if (wasRoomId !== roomId) {
			console.log(`üîÑ Room changed from "${wasRoomId}" to "${roomId}"`);

			// –ï—Å–ª–∏ roomId —Å—Ç–∞–ª null - –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
			if (!roomId) {
				console.log("üìù Switching to standalone mode");
				shouldReconnectRef.current = false;
				setIsConnected(false);
				setIsJoinedRoom(false);
				setConnectionError(null);
				// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
				if (reconnectTimeoutRef.current) {
					clearTimeout(reconnectTimeoutRef.current);
					reconnectTimeoutRef.current = null;
				}
				if (pingIntervalRef.current) {
					clearInterval(pingIntervalRef.current);
					pingIntervalRef.current = null;
				}
				if (heartbeatTimeoutRef.current) {
					clearTimeout(heartbeatTimeoutRef.current);
					heartbeatTimeoutRef.current = null;
				}
				if (socketRef.current) {
					socketRef.current.close();
				}
				return;
			}

			// –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π roomId –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∫–æ–º–Ω–∞—Ç–∞ - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
			if (roomId) {
				console.log("üîå Room connection needed for:", roomId);
				shouldReconnectRef.current = true;
				setConnectionError(null);
				connectionAttempts.current = 0;

				// –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
				if (
					wasRoomId &&
					isConnectedRef.current &&
					socketRef.current?.readyState === WebSocket.OPEN
				) {
					console.log("üè† Switching to new room via existing connection");
					// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
					const savedUsername = localStorage.getItem("innoprog-username");
					const joinMessage = `42["join-room",${JSON.stringify({
						telegramId: myTelegramIdRef.current,
						roomId: roomId,
						username: savedUsername || undefined,
					})}]`;
					socketRef.current.send(joinMessage);
					return;
				}

				// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ onclose
				console.log("üîÑ Triggering reconnection by closing socket");
				if (socketRef.current) {
					socketRef.current.close();
				} else {
					// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
					console.log("üîå No existing socket, triggering force reconnect");
					lastConnectionTime.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
					connectionAttempts.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
					setConnectionError(null);

					// –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ state change
					setForceReconnectTrigger((prev) => prev + 1);
				}
				return;
			}
		}
	}, [socketUrl, myTelegramId, roomId]);

	// –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	useEffect(() => {
		shouldReconnectRef.current = true;
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å roomId
		if (roomId) {
			// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
			setConnectionError(null);
			connectionAttempts.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
			lastConnectionTime.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
			connectWebSocket();
		} else {
			console.log("üìù Starting in standalone editor mode");
		}

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
		const handleBeforeUnload = () => {
			shouldReconnectRef.current = false;
			clearIntervals();
			if (socketRef.current) {
				socketRef.current.close();
			}
		};

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –≤–∫–ª–∞–¥–∫–∏ (–Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è)
		const handleVisibilityChange = () => {
			if (document.hidden) {
				console.log("üì± Tab hidden, keeping connection");
			} else {
				console.log("üì± Tab visible");
				// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å roomId, —Å–≤—è–∑—å –ø–æ—Ç–µ—Ä—è–Ω–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
				if (
					roomIdRef.current &&
					!isConnectedRef.current &&
					shouldReconnectRef.current
				) {
					console.log("üîÑ Reconnecting after tab became visible");
					// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
					setConnectionError(null);
					connectionAttempts.current = 0;
					lastConnectionTime.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
					connectWebSocket();
				}
			}
		};

		window.addEventListener("beforeunload", handleBeforeUnload);
		document.addEventListener("visibilitychange", handleVisibilityChange);

		return () => {
			shouldReconnectRef.current = false;
			clearIntervals();
			// –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–µ—á–∞—Ç–∏
			typingTimeouts.current.forEach((timeout) => clearTimeout(timeout));
			typingTimeouts.current.clear();

			if (socketRef.current) {
				socketRef.current.close();
			}
			window.removeEventListener("beforeunload", handleBeforeUnload);
			document.removeEventListener("visibilitychange", handleVisibilityChange);
		};
	}, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!

	// –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	const sendCursorPosition = useCallback((position: [number, number]) => {
		if (socketRef.current?.readyState === WebSocket.OPEN && roomIdRef.current) {
			const message = `42["cursor",${JSON.stringify({
				telegramId: myTelegramIdRef.current,
				roomId: roomIdRef.current,
				position,
				logs: [],
			})}]`;
			socketRef.current.send(message);
		}
	}, []);

	const sendSelection = useCallback(
		(selectionData: {
			// –î–ª—è –∫—É—Ä—Å–æ—Ä–∞
			line?: number;
			column?: number;
			// –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
			selectionStart?: { line: number; column: number };
			selectionEnd?: { line: number; column: number };
			selectedText?: string;
			// –§–ª–∞–≥ –¥–ª—è —è–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
			clearSelection?: boolean;
		}) => {
			if (
				socketRef.current?.readyState === WebSocket.OPEN &&
				roomIdRef.current
			) {
				const message = `42["selection",${JSON.stringify({
					telegramId: myTelegramIdRef.current,
					roomId: roomIdRef.current,
					...selectionData,
				})}]`;
				console.log("üì§ Sending selection message:", message);
				socketRef.current.send(message);
			}
		},
		[]
	);

	const sendCodeEdit = useCallback(
		(
			changes: { from: number; to: number; insert: string }[],
			newCode: string
		) => {
			if (
				socketRef.current?.readyState === WebSocket.OPEN &&
				roomIdRef.current
			) {
				// –û—Ç–º–µ—á–∞–µ–º —Å–µ–±—è –∫–∞–∫ –ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ
				markUserAsTyping(myTelegramIdRef.current);

				const message = `42["code-edit",${JSON.stringify({
					roomId: roomIdRef.current,
					telegramId: myTelegramIdRef.current,
					changes,
					newCode,
				})}]`;
				socketRef.current.send(message);
				console.log("üì§ Sent code edit:", changes.length, "changes");
			}
		},
		[markUserAsTyping]
	);

	const sendEditMember = useCallback((username?: string) => {
		if (socketRef.current?.readyState === WebSocket.OPEN && roomIdRef.current) {
			const message = `42["edit-member",${JSON.stringify({
				telegramId: myTelegramIdRef.current,
				roomId: roomIdRef.current,
				username,
			})}]`;
			socketRef.current.send(message);
			console.log("üì§ Sent edit member:", username);
		}
	}, []);

	const sendRoomPermissions = useCallback((permissions: RoomPermissions) => {
		if (socketRef.current?.readyState === WebSocket.OPEN && roomIdRef.current) {
			const message = `42["edit-room",${JSON.stringify({
				id: myTelegramIdRef.current,
				roomId: roomIdRef.current,
				studentCursorEnabled: permissions.studentCursorEnabled,
				studentSelectionEnabled: permissions.studentSelectionEnabled,
				studentEditCodeEnabled: permissions.studentEditCodeEnabled,
			})}]`;
			socketRef.current.send(message);
			console.log("üì§ Sent room permissions:", permissions);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
			const soundMessage = `42["room-sound",${JSON.stringify({
				telegramId: myTelegramIdRef.current,
				roomId: roomIdRef.current,
				soundType: "permission-change",
			})}]`;
			socketRef.current.send(soundMessage);
		}
	}, []);

	return {
		socket: socketRef.current,
		isConnected,
		isJoinedRoom,
		roomMembers,
		cursors,
		selections,
		codeEdits,
		myUserColor,
		roomPermissions,
		isTeacher,
		sendCursorPosition,
		sendSelection,
		sendCodeEdit,
		sendEditMember,
		sendRoomPermissions,
		activeTypers,
		markUserAsTyping,
		connectionError,
		completeSession,
	};
};
