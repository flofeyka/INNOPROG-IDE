import { useDisclosure } from "@heroui/react";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useSearchParams } from "react-router-dom";
import { useCodeExecution } from "../../../../hooks/useCodeExecution";
import { api } from "../../../../services/api";
import { Answer, Language, Task } from "../../../../types/task";

import { Socket } from "socket.io-client";
import CodeEditorSection from "../CodeEditorSection/CodeEditorSection";
import Loader from "../../Room/Loader/Loader";
import OutputSection from "../OutputSection/OutputSection";
import StartFormModal from "../../Room/StartFormModal/StartFormModal";
import SubmitModal from "../SubmitModal/SubmitModal";
import TaskDescription from "../TaskDescription/TaskDescription";
import Header from "../../Header/Header";
import Footer from "../../Footer/Footer";

export interface RoomMember {
  telegramId: string;
  online: boolean;
  userColor?: string;
  username?: string;
}

interface CursorData {
  telegramId: string;
  position: [number, number];
  userColor: string;
  isOffline?: boolean;
}

interface RoomPermissions {
  studentCursorEnabled: boolean;
  studentSelectionEnabled: boolean;
  studentEditCodeEnabled: boolean;
}

interface WebSocketData {
  socket: Socket | null;
  isConnected: boolean;
  isJoinedRoom: boolean;
  connectionError: string | null;
  roomMembers: RoomMember[];
  cursors: Map<string, CursorData>;
  completeSession: () => void;
  selections: Map<
    string,
    {
      line?: number;
      column?: number;
      selectionStart?: { line: number; column: number };
      selectionEnd?: { line: number; column: number };
      selectedText?: string;
      userColor: string;
    }
  >;
  myUserColor: string;
  roomPermissions: RoomPermissions;
  isTeacher?: boolean;
  sendCursorPosition: (position: [number, number]) => void;
  sendSelection: (selectionData: {
    line?: number;
    column?: number;
    selectionStart?: { line: number; column: number };
    selectionEnd?: { line: number; column: number };
    selectedText?: string;
  }) => void;
  onSendUpdate?: (update: Uint8Array) => void;
  updatesFromProps?: Uint8Array[];
  sendEditMember: (username?: string) => void;
  sendRoomPermissions: (permissions: RoomPermissions) => void;
  activeTypers: Set<string>;
  markUserAsTyping: (telegramId: string) => void;
  completed: boolean;
  sendChangeLanguage: (language: Language) => void;
  language?: Language;
  joinedCode?: string;
}

interface IDEProps {
  webSocketData?: WebSocketData;
  telegramId: string;
}

const IDE: React.FC<IDEProps> = React.memo(({ webSocketData, telegramId }) => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [task, setTask] = useState<Task | null>(null);
  const [code, setCode] = useState<string>("");
  const [output, setOutput] = useState<string>("");
  const [activeTab, setActiveTab] = useState<"editor" | "output">("editor");
  const [status, setStatus] = useState<"idle" | "success" | "error">("idle");
  const [currentAnswer, setCurrentAnswer] = useState<Answer | null>(null);
  const [submitResult, setSubmitResult] = useState<
    "success" | "error" | "no_data"
  >("success");
  const [inputData, setInputData] = useState<string>("");
  const [outputData, setOutputData] = useState<string>("");
  const [isOutputData, setIsOutputData] = useState<boolean>(false);
  const [isInputData, setIsInputData] = useState<boolean>(true);
  const [showStartModal, setShowStartModal] = useState<boolean>(false);

  const { onOpen, onOpenChange, isOpen, onClose } = useDisclosure();

  const taskId = searchParams.get("task_id") || null;
  const language = searchParams.get("lang") || "py";
  const answer_id = searchParams.get("answer_id");
  const roomId = searchParams.get("roomId");

  const { isRunning, handleRunCode, onSendCheck } = useCodeExecution({
    currentAnswer,
    task,
    code,
    inputData,
    outputData,
    taskId,
    answer_id,
    language,
    setOutput,
    setStatus,
    setActiveTab,
    setSubmitResult,
    onOpen,
    status,
  });

  const onModalRunCode = async () => {
    if (!task?.answers?.length || !taskId) {
      setSubmitResult("no_data");
      onOpen();
    } else {
      await handleRunCode();
    }
  };

  useEffect(() => {
    if (webSocketData?.language) {
      const language: Language = webSocketData.language;
      setSearchParams((prev: URLSearchParams): URLSearchParams => {
        prev.set("lang", language);

        return prev;
      });
    }
  }, [setSearchParams, webSocketData?.language]);

  const memoizedSetCode = useCallback((newCode: string) => {
    setCode(newCode);
  }, []);

  const handleStartFormSubmit = useCallback(
    (username?: string) => {
      if (webSocketData?.sendEditMember) {
        webSocketData.sendEditMember(username);
      }
      setShowStartModal(false);
    },
    [webSocketData?.sendEditMember]
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å roomId)
  useEffect(() => {
    // –ï—Å–ª–∏ –Ω–µ—Ç roomId, —Ç–æ –º–æ–¥–∞–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    if (!roomId) {
      return;
    }

    if (!webSocketData?.isConnected || !webSocketData?.isJoinedRoom) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const savedUsername = localStorage.getItem("innoprog-username");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –≤ roomMembers
    const currentMember = webSocketData.roomMembers?.find(
      (member) => member.telegramId === telegramId
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ò —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–º–µ–Ω–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (
      !savedUsername &&
      (!currentMember?.username || currentMember.username.trim() === "")
    ) {
      setShowStartModal(true);
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è, –Ω–æ –Ω–µ—Ç –∏–º–µ–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (
        savedUsername &&
        (!currentMember?.username || currentMember.username.trim() === "")
      ) {
        webSocketData?.sendEditMember?.(savedUsername);
      }
    }
  }, [
    webSocketData?.isConnected,
    webSocketData?.isJoinedRoom,
    webSocketData?.roomMembers,
    webSocketData?.sendEditMember,
    telegramId,
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–¥–∞
  const [codeSource, setCodeSource] = useState<"none" | "api" | "room">("none");
  const [roomCodeLoaded, setRoomCodeLoaded] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
  useEffect(() => {
    const loadTask = async () => {
      if (!taskId) return;

      try {
        const taskData = await api.getTask(taskId);
        setTask(taskData);
        if (taskData.answers && taskData.answers.length > 1) {
          setCurrentAnswer({
            ...taskData.answers[0],
          });
        }
        console.log("üìã Task loaded:", taskData);
      } catch (error) {
        console.error("Failed to load task:", error);
      }
    };

    loadTask();
  }, [taskId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
  useEffect(() => {
    const loadCode = async () => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å roomId, –∂–¥–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      if (roomId && !roomCodeLoaded) {
        console.log("‚è≥ Waiting for room code to load...");
        return;
      }

      // –ï—Å–ª–∏ –∫–æ–¥ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
      if (codeSource === "room") {
        console.log("üìù Code already loaded from room, skipping API load");
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥ –∏–∑ API
      if (taskId && answer_id) {
        console.log("üì• Loading code from API (answer)...");
        try {
          const data = await api.getSubmitCode(
            answer_id,
            window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 429272623,
            Number(taskId)
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º
          if (data.code) {
            setCode(data.code);
            setCodeSource("api");
            console.log("‚úÖ Code loaded from API answer");
          }
        } catch (error) {
          console.error("Failed to load answer code:", error);
        }
      } else if (taskId && !answer_id && codeSource === "none") {
        // –ï—Å–ª–∏ –Ω–µ—Ç answer_id, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–¥
        console.log("üìù No answer_id, setting empty code");
        setCode("");
        setCodeSource("api");
      }
    };

    loadCode();
  }, [taskId, answer_id, roomId, roomCodeLoaded, codeSource]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    const handleRoomStateLoaded = (event: CustomEvent) => {
      const { lastCode, participantCount } = event.detail;
      console.log("üè† Room state loaded:", {
        codeLength: lastCode?.length || 0,
        participantCount,
      });

      if (lastCode && lastCode.trim()) {
        let editableCode = lastCode;

        if (task?.answers?.[0]) {
          const codeBefore = task.answers[0].code_before || "";
          const codeAfter = task.answers[0].code_after || "";

          // –ï—Å–ª–∏ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —á–∞—Å—Ç—å
          if (codeBefore && lastCode.startsWith(codeBefore)) {
            editableCode = lastCode.slice(codeBefore.length);
            if (codeAfter && editableCode.endsWith(codeAfter)) {
              editableCode = editableCode.slice(0, -codeAfter.length);
            }
            console.log("üîÑ Extracted editable code from full saved code");
          }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —á–∞—Å—Ç—å
        setCode(editableCode);
        setCodeSource("room");
        console.log(
          "‚úÖ Code loaded from room (editable part only, preserves task structure)"
        );
      } else {
        console.log("üì≠ No code in room, will load from API");
      }
      setRoomCodeLoaded(true);
    };

    window.addEventListener(
      "roomStateLoaded",
      handleRoomStateLoaded as EventListener
    );

    // –ï—Å–ª–∏ –Ω–µ—Ç roomId, —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    if (!roomId) {
      setRoomCodeLoaded(true);
    }

    return () => {
      window.removeEventListener(
        "roomStateLoaded",
        handleRoomStateLoaded as EventListener
      );
    };
  }, [roomId, task]); // –î–æ–±–∞–≤–ª—è–µ–º task –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

  const handleLanguageChange = useCallback(
    (lang: Language) => {
      setSearchParams((prev) => {
        prev.set("lang", lang);
        return prev;
      });
      if (webSocketData) {
        webSocketData.sendChangeLanguage(lang);
      }
    },
    [setSearchParams, webSocketData]
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º webSocketData –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
  const memoizedWebSocketData = useMemo(() => {
    if (!webSocketData) return undefined;

    return {
      sendSelection: webSocketData.sendSelection,
      selections: webSocketData.selections,
      onSendUpdate: webSocketData.onSendUpdate,
      updatesFromProps: webSocketData.updatesFromProps,
      activeTypers: webSocketData.activeTypers,
      myTelegramId: telegramId,
      completed: webSocketData.completed,
      roomPermissions: webSocketData.roomPermissions,
      isTeacher: webSocketData.isTeacher,
      joinedCode: webSocketData.joinedCode,
    };
  }, [
    webSocketData?.isTeacher,
    telegramId,
    webSocketData?.sendSelection,
    webSocketData?.selections,
    webSocketData?.onSendUpdate,
    webSocketData?.updatesFromProps,
    webSocketData?.activeTypers,
    webSocketData?.joinedCode,
    searchParams,
  ]);

  return (
    <div className="min-h-screen h-screen flex flex-col bg-ide-background text-ide-text-primary">
      {/* –õ–æ–∞–¥–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å roomId –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º */}
      {roomId &&
        (!webSocketData?.isConnected || !webSocketData?.isJoinedRoom) && (
          <Loader
            message={
              webSocketData?.connectionError
                ? webSocketData.connectionError
                : !webSocketData?.isConnected
                ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."
                : "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ..."
            }
            isError={Boolean(webSocketData?.connectionError ?? false)}
          />
        )}

      <SubmitModal
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        onClose={onClose}
        submitResult={submitResult}
        isRunning={isRunning}
        inputData={inputData}
        setInputData={setInputData}
        outputData={outputData}
        setOutputData={setOutputData}
        isInputData={isInputData}
        setIsInputData={setIsInputData}
        isOutputData={isOutputData}
        setIsOutputData={setIsOutputData}
        onApply={handleRunCode}
      />

      {roomId &&
        webSocketData?.isConnected &&
        webSocketData?.isJoinedRoom &&
        showStartModal && <StartFormModal onSendForm={handleStartFormSubmit} />}

      <Header
        completedSession={webSocketData?.completed}
        onCompleteSession={webSocketData?.completeSession}
        members={webSocketData?.roomMembers}
        onEditMember={webSocketData?.sendEditMember}
        myTelegramId={telegramId}
        roomPermissions={webSocketData?.roomPermissions}
        isTeacher={webSocketData?.isTeacher || false}
        onPermissionsChange={webSocketData?.sendRoomPermissions}
        roomId={roomId}
      />

      <TaskDescription task={task} />

      <main className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col md:flex-row">
          <CodeEditorSection
            code={code}
            setCode={memoizedSetCode}
            language={language}
            currentAnswer={currentAnswer}
            task={task}
            activeTab={activeTab}
            webSocketData={memoizedWebSocketData}
            handleLanguageChange={handleLanguageChange}
          />

          <OutputSection
            output={output}
            status={status}
            activeTab={activeTab}
          />
        </div>
      </main>

      <Footer
        status={status}
        taskId={taskId}
        isRunning={isRunning}
        activeTab={activeTab}
        onRunCode={onModalRunCode}
        onSubmitCheck={onSendCheck}
        setActiveTab={setActiveTab}
        setStatus={setStatus}
      />
    </div>
  );
});

export default IDE;
