import { defaultKeymap } from "@codemirror/commands";
import { javascript } from "@codemirror/lang-javascript";
import { python } from "@codemirror/lang-python";
import { EditorState, StateEffect, StateField } from "@codemirror/state";
import { oneDark } from "@codemirror/theme-one-dark";
import {
	Decoration,
	DecorationSet,
	EditorView,
	keymap,
} from "@codemirror/view";
import React, { useEffect, useRef } from "react";

interface CodeEditorProps {
	value: string;
	onChange: (value: string) => void;
	language?: string;
	codeBefore?: string;
	codeAfter?: string;
	readOnly?: boolean;
	// WebSocket props –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
	sendSelection?: (selectionData: {
		// –î–ª—è –∫—É—Ä—Å–æ—Ä–∞
		line?: number;
		column?: number;
		// –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
		selectionStart?: { line: number; column: number };
		selectionEnd?: { line: number; column: number };
		selectedText?: string;
		// –§–ª–∞–≥ –¥–ª—è —è–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
		clearSelection?: boolean;
	}) => void;
	selections?: Map<
		string,
		{
			line?: number;
			column?: number;
			selectionStart?: { line: number; column: number };
			selectionEnd?: { line: number; column: number };
			selectedText?: string;
			userColor: string;
		}
	>;
	// WebSocket props –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	sendCodeEdit?: (
		changes: { from: number; to: number; insert: string }[],
		newCode: string
	) => void;
	codeEdits?: Map<
		string,
		{
			telegramId: string;
			changes: { from: number; to: number; insert: string }[];
			newCode: string;
			userColor: string;
			timestamp: number;
		}
	>;
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–µ—á–∞—Ç–∞–µ—Ç
	activeTypers?: Set<string>;
	myTelegramId?: string;
	completed: boolean;
}

// Effect –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—Å–µ—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–π
const replaceSelectionsEffect = StateEffect.define<DecorationSet>();

// Effect –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const applyCodeEditEffect = StateEffect.define<{
	changes: { from: number; to: number; insert: string }[];
	userColor: string;
}>();

// State field –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const selectionHighlightField = StateField.define<DecorationSet>({
	create() {
		return Decoration.none;
	},
	update(decorations, tr) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–º–µ–Ω—ã –≤—ã–¥–µ–ª–µ–Ω–∏–π
		for (let effect of tr.effects) {
			if (effect.is(replaceSelectionsEffect)) {
				// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã–º–∏
				return effect.value;
			}
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–º–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è–º
		return decorations.map(tr.changes);
	},
	provide: (f) => EditorView.decorations.from(f),
});

// Extension –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const codeEditExtension = EditorView.updateListener.of((update) => {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
	for (let effect of update.transactions.flatMap((tr) => tr.effects)) {
		if (effect.is(applyCodeEditEffect)) {
			const { changes } = effect.value;
			console.log("üìù Applying code changes from other user:", changes);
			// –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ dispatch, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
		}
	}
});

const CodeEditor: React.FC<CodeEditorProps> = React.memo(
	({
		value,
		onChange,
		language = "javascript",
		codeBefore = "",
		codeAfter = "",
		readOnly = false,
		sendSelection,
		selections,
		sendCodeEdit,
		codeEdits,
		activeTypers,
		myTelegramId,
		completed,
	}) => {
		const editor = useRef<EditorView>();
		const editorContainer = useRef<HTMLDivElement>(null);
		const isUpdating = useRef(false);
		const prevValue = useRef(value);

		const lastLocalEditTime = useRef<number>(0);
		const hadTextSelection = useRef<boolean>(false); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –±—ã–ª–æ –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º refs –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
		const onChangeRef = useRef(onChange);
		const sendSelectionRef = useRef(sendSelection);
		const sendCodeEditRef = useRef(sendCodeEdit);

		// –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
		onChangeRef.current = onChange;
		sendSelectionRef.current = sendSelection;
		sendCodeEditRef.current = sendCodeEdit;

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
		useEffect(() => {
			const handleRoomStateLoaded = (event: CustomEvent) => {
				const { lastCode } = event.detail;
				if (lastCode && lastCode !== value && editor.current) {
					console.log("üîÑ Loading saved code from DB...");

					// ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –∫–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —á–∞—Å—Ç—å—é
					// –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∞ —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
					// –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –∑–∞–¥–∞—á–∏

					isUpdating.current = true;
					try {
						// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —á–∞—Å—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
						let editableCode = lastCode;

						// –ï—Å–ª–∏ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —á–∞—Å—Ç—å
						if (codeBefore && lastCode.startsWith(codeBefore)) {
							editableCode = lastCode.slice(codeBefore.length);
							if (codeAfter && editableCode.endsWith(codeAfter)) {
								editableCode = editableCode.slice(0, -codeAfter.length);
							}
							console.log("üîÑ Extracted editable part from legacy full code");
						}

						// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ —á–∞—Å—Ç—è–º–∏
						const fullContent = `${codeBefore}${editableCode}${codeAfter}`;

						// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
						const transaction = editor.current.state.update({
							changes: {
								from: 0,
								to: editor.current.state.doc.length,
								insert: fullContent,
							},
						});
						editor.current.dispatch(transaction);

						// –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —á–∞—Å—Ç—å—é
						if (onChangeRef.current) {
							onChangeRef.current(editableCode);
						}

						prevValue.current = editableCode;
						console.log("‚úÖ Room code loaded preserving task structure");
					} catch (error) {
						console.error("Error loading room state:", error);
					} finally {
						isUpdating.current = false;
					}
				}
			};

			window.addEventListener(
				"roomStateLoaded",
				handleRoomStateLoaded as EventListener
			);
			return () => {
				window.removeEventListener(
					"roomStateLoaded",
					handleRoomStateLoaded as EventListener
				);
			};
		}, [value, codeBefore, codeAfter]); // –î–æ–±–∞–≤–ª—è–µ–º codeBefore –∏ codeAfter –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä
		const isEditorBlocked = !!(
			activeTypers &&
			myTelegramId &&
			activeTypers.size > 0 &&
			!activeTypers.has(myTelegramId)
		);

		// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º readOnly
		// const effectiveReadOnly = readOnly || isEditorBlocked;
		const effectiveReadOnly = readOnly || completed;

		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		useEffect(() => {
			if (editor.current) {
				console.log(
					"üìç Processing selections:",
					selections?.size || 0,
					"selections"
				);

				// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ
				const decorations: any[] = [];

				if (selections && selections.size > 0) {
					selections.forEach((selectionData, telegramId) => {
						try {
							const doc = editor.current!.state.doc;

							// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
							if (
								selectionData.selectionStart &&
								selectionData.selectionEnd &&
								selectionData.selectedText
							) {
								if (
									selectionData.selectionStart.line <= doc.lines &&
									selectionData.selectionEnd.line <= doc.lines
								) {
									const startLineInfo = doc.line(
										selectionData.selectionStart.line
									);
									const endLineInfo = doc.line(selectionData.selectionEnd.line);

									const from =
										startLineInfo.from + selectionData.selectionStart.column;
									const to =
										endLineInfo.from + selectionData.selectionEnd.column;

									const selectionDecoration = Decoration.mark({
										class: "cm-user-text-selection",
										attributes: {
											style: `background-color: ${selectionData.userColor}40 !important; border-bottom: 2px solid ${selectionData.userColor} !important;`,
											title: `Selected by ${telegramId}: "${selectionData.selectedText}"`,
										},
									});

									decorations.push(selectionDecoration.range(from, to));
									console.log(
										`üìç Added text selection for ${telegramId}: "${selectionData.selectedText}"`
									);
								}
							}
							// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
							else if (
								selectionData.line &&
								typeof selectionData.column === "number"
							) {
								if (selectionData.line <= doc.lines) {
									const lineInfo = doc.line(selectionData.line);
									const position = lineInfo.from + selectionData.column;

									const cursorDecoration = Decoration.mark({
										class: "cm-user-cursor-position",
										attributes: {
											style: `border-left: 3px solid ${selectionData.userColor} !important; margin-left: -1px;`,
											title: `${telegramId} cursor at ${selectionData.line}:${selectionData.column}`,
										},
									});

									decorations.push(cursorDecoration.range(position, position));
									console.log(
										`üìç Added cursor position for ${telegramId}: ${selectionData.line}:${selectionData.column}`
									);
								}
							}
						} catch (error) {
							console.error(
								"Error processing selection for",
								telegramId,
								error
							);
						}
					});
				}

				// –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É
				editor.current.dispatch({
					effects: replaceSelectionsEffect.of(Decoration.set(decorations)),
				});

				console.log("üìç Applied", decorations.length, "selection decorations");
			}
		}, [selections]);

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		useEffect(() => {
			if (editor.current && codeEdits) {
				const latestEdit = Array.from(codeEdits.values()).sort(
					(a, b) => b.timestamp - a.timestamp
				)[0];
				if (latestEdit) {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä—à–µ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
					const timeDiff = Date.now() - lastLocalEditTime.current;
					if (timeDiff < 1000) {
						// –ï—Å–ª–∏ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥
						console.log("üö´ Skipping remote edit - local edit too recent");
						return;
					}

					console.log("üìù Applying code edit from:", latestEdit.telegramId);

					// –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
					try {
						isUpdating.current = true;

						// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
						const selection = editor.current.state.selection;
						const cursorPos = selection.main.head;
						const relativeCursorPos = Math.max(
							codeBefore.length,
							Math.min(
								cursorPos,
								editor.current.state.doc.length - codeAfter.length
							)
						);

						const fullContent = `${codeBefore}${latestEdit.newCode}${codeAfter}`;

						// –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
						const newCursorPos = Math.min(
							relativeCursorPos,
							fullContent.length - codeAfter.length
						);

						editor.current.dispatch({
							changes: {
								from: 0,
								to: editor.current.state.doc.length,
								insert: fullContent,
							},
							selection: { anchor: newCursorPos, head: newCursorPos }, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
							effects: applyCodeEditEffect.of({
								changes: latestEdit.changes,
								userColor: latestEdit.userColor,
							}),
						});

						// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
						if (latestEdit.newCode !== prevValue.current) {
							prevValue.current = latestEdit.newCode;
							onChangeRef.current(latestEdit.newCode);
						}

						isUpdating.current = false;
					} catch (error) {
						console.error("Error applying code edit:", error);
						isUpdating.current = false;
					}
				}
			}
		}, [codeEdits, codeBefore, codeAfter, onChange]);

		useEffect(() => {
			if (!editorContainer.current) return;

			const languageSupport = language === "py" ? python() : javascript();

			const state = EditorState.create({
				doc: `${codeBefore}${value}${codeAfter}`,
				extensions: [
					languageSupport,
					oneDark,
					keymap.of(defaultKeymap),
					selectionHighlightField, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–π
					codeEditExtension, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞
					EditorView.updateListener.of((update) => {
						if (update.docChanged && !isUpdating.current) {
							try {
								const newValue = update.state.doc.toString();
								if (
									!newValue.startsWith(codeBefore) ||
									!newValue.endsWith(codeAfter)
								) {
									// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
									isUpdating.current = true;
									editor.current?.dispatch({
										changes: {
											from: 0,
											to: newValue.length,
											insert: `${codeBefore}${prevValue.current}${codeAfter}`,
										},
									});
									isUpdating.current = false;
									return;
								}

								const userCode = newValue.slice(
									codeBefore.length,
									newValue.length - codeAfter.length
								);

								if (userCode !== prevValue.current) {
									prevValue.current = userCode;
									lastLocalEditTime.current = Date.now(); // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
									onChangeRef.current(userCode);

									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ WebSocket (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª)
									if (sendCodeEditRef.current) {
										const changes: {
											from: number;
											to: number;
											insert: string;
										}[] = [];
										update.changes.iterChanges(
											(fromA, toA, fromB, toB, text) => {
												changes.push({
													from: fromA,
													to: toA,
													insert: text.toString(),
												});
											}
										);
										sendCodeEditRef.current(changes, userCode);
									}
								}
							} catch (error) {
								console.error("Error in editor update:", error);
							}
						}

						// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - –ù–û –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï –∏–∑–º–µ–Ω—è–ª—Å—è –¥–æ–∫—É–º–µ–Ω—Ç
						if (
							update.selectionSet &&
							!update.docChanged &&
							sendSelectionRef.current
						) {
							const selection = update.state.selection.main;
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ (–∫—É—Ä—Å–æ—Ä)
							try {
								const doc = update.state.doc;

								if (!selection.empty) {
									// –ï—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
									const selectedText = doc.sliceString(
										selection.from,
										selection.to
									);

									// –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
									const startLine = doc.lineAt(selection.from);
									const endLine = doc.lineAt(selection.to);

									const selectionData = {
										selectionStart: {
											line: startLine.number,
											column: selection.from - startLine.from,
										},
										selectionEnd: {
											line: endLine.number,
											column: selection.to - endLine.from,
										},
										selectedText: selectedText,
									};

									// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
									sendSelectionRef.current(selectionData);
									hadTextSelection.current = true; // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
									console.log(
										"üì§ Sending text selection:",
										`${selectionData.selectionStart.line}:${selectionData.selectionStart.column} - ${selectionData.selectionEnd.line}:${selectionData.selectionEnd.column}`,
										`"${selectedText}"`
									);
								} else {
									// –ü—Ä–æ—Å—Ç–æ –∫—É—Ä—Å–æ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ —Ä–∞–Ω—å—à–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
									const line = doc.lineAt(selection.head);
									const lineNumber = line.number;
									const columnNumber = selection.head - line.from;

									if (hadTextSelection.current) {
										// –ë—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–µ—Ç - —è–≤–Ω–æ –æ—á–∏—â–∞–µ–º
										console.log("üì§ Clearing text selection - user deselected");
										sendSelectionRef.current({
											line: lineNumber,
											column: columnNumber,
											clearSelection: true, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
										});
										hadTextSelection.current = false;
									} else {
										// –ü—Ä–æ—Å—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
										sendSelectionRef.current({
											line: lineNumber,
											column: columnNumber,
										});
										console.log(
											"üì§ Sending cursor position:",
											`${lineNumber}:${columnNumber}`
										);
									}
								}
							} catch (error) {
								console.error("Error sending selection:", error);
							}
						}
					}),
					EditorView.editable.of(!effectiveReadOnly),
					EditorState.readOnly.of(effectiveReadOnly),
					EditorView.theme({
						"&": {
							height: "100%",
							fontSize: "14px",
						},
						".cm-scroller": {
							fontFamily: "Consolas, monospace",
							lineHeight: "1.6",
						},
						".cm-content": {
							caretColor: "#fff",
						},
						"&.cm-focused": {
							outline: "none",
						},
						// –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
						".cm-user-text-selection": {
							borderRadius: "2px",
							position: "relative",
							opacity: "0.8",
							fontWeight: "500",
						},
						".cm-user-cursor-position": {
							position: "relative",
							display: "inline-block",
							animation: "pulse 1s infinite",
						},
						"@keyframes pulse": {
							"0%": { opacity: "1" },
							"50%": { opacity: "0.5" },
							"100%": { opacity: "1" },
						},
					}),
				],
			});

			const view = new EditorView({
				state,
				parent: editorContainer.current,
			});

			editor.current = view;

			return () => {
				view.destroy();
			};
		}, [language, effectiveReadOnly, codeBefore, codeAfter]); // –£–±–∏—Ä–∞–µ–º value, onChange, sendSelection, sendCodeEdit –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ value –∏–∑–≤–Ω–µ
		useEffect(() => {
			if (editor.current && value !== prevValue.current) {
				try {
					isUpdating.current = true;

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
					const selection = editor.current.state.selection;
					const cursorPos = selection.main.head;
					const relativeCursorPos = Math.max(
						codeBefore.length,
						Math.min(
							cursorPos,
							editor.current.state.doc.length - codeAfter.length
						)
					);

					const fullContent = `${codeBefore}${value}${codeAfter}`;

					// –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
					const newCursorPos = Math.min(
						relativeCursorPos,
						fullContent.length - codeAfter.length
					);

					editor.current.dispatch({
						changes: {
							from: 0,
							to: editor.current.state.doc.length,
							insert: fullContent,
						},
						selection: { anchor: newCursorPos, head: newCursorPos }, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
					});
					prevValue.current = value;
					isUpdating.current = false;
				} catch (error) {
					console.error("Error updating editor content:", error);
				}
			}
		}, [value, codeBefore, codeAfter]);

		return (
			<div className="relative h-full rounded-lg overflow-hidden bg-ide-editor">
				<div className="px-3 py-2 border-b border-ide-border bg-ide-secondary">
					<span className="text-ide-text-secondary text-sm">
						{language === "py" ? "script.py" : "script.js"}
					</span>
					{/* {isEditorBlocked && (
						<span className="ml-2 text-yellow-500 text-xs">
							üîí –ö—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç...
						</span>
					)} */}
				</div>
				<div
					ref={editorContainer}
					className="h-[calc(100%-40px)] overflow-auto"
				/>
			</div>
		);
	}
);

CodeEditor.displayName = "CodeEditor";

export default CodeEditor;
